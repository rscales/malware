// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: url_cache_api/url_cache_api.proto

package url_cache_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	URLCache_GetURLInfo_FullMethodName        = "/URLCache/getURLInfo"
	URLCache_SetFlaggedMalware_FullMethodName = "/URLCache/setFlaggedMalware"
)

// URLCacheClient is the client API for URLCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type URLCacheClient interface {
	GetURLInfo(ctx context.Context, in *URLInfoRequest, opts ...grpc.CallOption) (*URLInfoResponse, error)
	SetFlaggedMalware(ctx context.Context, in *URLInfoRequest, opts ...grpc.CallOption) (*URLInfoResponse, error)
}

type uRLCacheClient struct {
	cc grpc.ClientConnInterface
}

func NewURLCacheClient(cc grpc.ClientConnInterface) URLCacheClient {
	return &uRLCacheClient{cc}
}

func (c *uRLCacheClient) GetURLInfo(ctx context.Context, in *URLInfoRequest, opts ...grpc.CallOption) (*URLInfoResponse, error) {
	out := new(URLInfoResponse)
	err := c.cc.Invoke(ctx, URLCache_GetURLInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLCacheClient) SetFlaggedMalware(ctx context.Context, in *URLInfoRequest, opts ...grpc.CallOption) (*URLInfoResponse, error) {
	out := new(URLInfoResponse)
	err := c.cc.Invoke(ctx, URLCache_SetFlaggedMalware_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// URLCacheServer is the server API for URLCache service.
// All implementations must embed UnimplementedURLCacheServer
// for forward compatibility
type URLCacheServer interface {
	GetURLInfo(context.Context, *URLInfoRequest) (*URLInfoResponse, error)
	SetFlaggedMalware(context.Context, *URLInfoRequest) (*URLInfoResponse, error)
	mustEmbedUnimplementedURLCacheServer()
}

// UnimplementedURLCacheServer must be embedded to have forward compatible implementations.
type UnimplementedURLCacheServer struct {
}

func (UnimplementedURLCacheServer) GetURLInfo(context.Context, *URLInfoRequest) (*URLInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURLInfo not implemented")
}
func (UnimplementedURLCacheServer) SetFlaggedMalware(context.Context, *URLInfoRequest) (*URLInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFlaggedMalware not implemented")
}
func (UnimplementedURLCacheServer) mustEmbedUnimplementedURLCacheServer() {}

// UnsafeURLCacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to URLCacheServer will
// result in compilation errors.
type UnsafeURLCacheServer interface {
	mustEmbedUnimplementedURLCacheServer()
}

func RegisterURLCacheServer(s grpc.ServiceRegistrar, srv URLCacheServer) {
	s.RegisterService(&URLCache_ServiceDesc, srv)
}

func _URLCache_GetURLInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URLInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLCacheServer).GetURLInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLCache_GetURLInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLCacheServer).GetURLInfo(ctx, req.(*URLInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLCache_SetFlaggedMalware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URLInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLCacheServer).SetFlaggedMalware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLCache_SetFlaggedMalware_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLCacheServer).SetFlaggedMalware(ctx, req.(*URLInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// URLCache_ServiceDesc is the grpc.ServiceDesc for URLCache service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var URLCache_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "URLCache",
	HandlerType: (*URLCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getURLInfo",
			Handler:    _URLCache_GetURLInfo_Handler,
		},
		{
			MethodName: "setFlaggedMalware",
			Handler:    _URLCache_SetFlaggedMalware_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "url_cache_api/url_cache_api.proto",
}
